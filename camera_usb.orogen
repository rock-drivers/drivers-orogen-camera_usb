name "camera_usb"

using_library "camera_usb"
using_task_library "camera_base"
import_types_from "base"

task_context "Task" do
    subclasses "camera_base::Task"

    property('camera_device', 'string','/dev/video0').
    	doc 'camera device, default is /dev/video0'

    # Default property values (-1, empty string) will be ignored.
    # V4L2_CID_BASE
    property('brightness', 'int', -1).
        doc 'Black level of the image'
    property('contrast', 'int', -1).
        doc 'Picture contrast or luma gain'
    property('backlight_compensation', 'int', -1).
        doc 'Adjust the backlight compensation, set minimal value (0) to disable'
    property('power_line_frequency', 'string').
    	doc 'Enable to avoid flicker, values (disabled, 50Hz, 60Hz, none)'
    property('focus_mode', 'string').
        doc 'Focus mode, values (auto, manual)'
    property('focus', 'int', -1).
        doc 'Focus value if mode not auto'
    property('horizontal_flip', 'int', -1).
        doc 'Horizontal flip.'
    property('vertical_flip', 'int', -1).
        doc 'Vertical flip'
    property('white_balance_temperature', 'int', -1).
        doc 'Whitebalance temperatue, can be used if whitebalance_mode is set to manual'

    # V4L2_CID_CAMERA_CLASS_BASE
    property('zoom', 'int', -1).
        doc 'Zoom value'

    # V4L2_CID_PRIVATE_BASE (special controls of the gumstix camera e-CAM32)
    property('single_auto_focus', 'int', -1).
        doc 'e-CAM32: 0 to 1, default 0'
    property('focus_overlay', 'int', -1).
        doc 'e-CAM32: 0 to 1, default 0, write-only'
    property('effects', 'int', -1).
        doc 'e-CAM32: 0 to 7, default 0'
    property('focus_complete', 'int', -1).
        doc 'e-CAM32: 0 to 1, default 0, write-only'
    property('test_pattern', 'int', -1).
        doc 'e-CAM32: 0 to 1, default 1'

    #fd_driven
    periodic 0.01
end

deployment "camera_usb_deployment" do
    task("camera_usb_deployment", "camera_usb::Task").periodic(0.01)
    # Declares it as periodic, with a period of 100ms
    #task("camera_usb_test", "CameraTask").
    #    periodic(0.1)
    # m.start
    add_default_logger
end

